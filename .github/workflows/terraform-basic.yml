on:
  workflow_call:
    inputs:
      region:
        required: true
        type: string
      remote-state:
        required: true
        type: string  
    secrets:
      A_K:
        required: true
      S_K:
        required: true
jobs:
  terraform-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Terraform fmt
      id: fmt
      run: terraform fmt --recursive
    - name: Add & Commit
      uses: EndBug/add-and-commit@v8
      with:
        author_name: 'Workflow'
        message: 'terraform fmt' 
        
  terraform-deployment:
    needs: terraform-format
    strategy:
      fail-fast: true
      max-parallel: ${{ github.ref == 'refs/heads/main' && 1 || 100 }}
      matrix:
        os: [ubuntu-latest]
        environment: ['prod']
    runs-on: ${{ matrix.os }}  
    # environment: ${{ inputs.env }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.A_K }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S_K }}
      AWS_REGION: ${{ inputs.region }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.3
  
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="key=${{ github.event.repository.name }}/${{ matrix.environment }}.tfstate" -reconfigure
  
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
  
      - name: Ensure this is the only pipeline running
        uses: softprops/turnstyle@v1
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out="${{ matrix.environment }}_plan"
  
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false "${{ matrix.environment }}_plan"
        
        
      #- uses: actions/github-script@0.9.0
      #  if: github.event_name == 'pull_request'
      #  env:
      #    PLAN: "terraform\n${{ steps.plan_prod.outputs.stdout }}"
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}
      #    script: |
      #      const environmentString = `Environment: PROD`;
      #      const output = `#### ${environmentString}
      #      * Terraform Format and Style üñå\`${{ steps.fmt_prod.outcome }}\`
      #      * Terraform Initialization ‚öôÔ∏è\`${{ steps.init_prod.outcome }}\`
      #      * Terraform Validation ü§ñ${{ steps.validate_prod.outputs.stdout }}
      #      * Terraform Plan üìñ\`${{ steps.plan_prod.outcome }}\`
      #      <details><summary>Show Plan</summary>
      #      \`\`\`${process.env.PLAN}\`\`\`
      #      </details>
      #      *Pusher: Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
      #      const comments = await github.issues.listComments({
      #        issue_number: context.issue.number,
      #        owner: context.repo.owner,
      #        repo: context.repo.repo,
      #        per_page: 100
      #      });
      #      const planComment = comments.data.find(c => c.body.includes(environmentString));
      #      if (planComment) {
      #        await github.issues.updateComment({
      #          issue_number: context.issue.number,
      #          comment_id: planComment.id,
      #          owner: context.repo.owner,
      #          repo: context.repo.repo,
      #          body: output
      #        });
      #      } else {
      #        await github.issues.createComment({
      #          issue_number: context.issue.number,
      #          owner: context.repo.owner,
      #          repo: context.repo.repo,
      #          body: output
      #        });
      #      }
