name: Build .Net lambda function in /latest.zip path
on:
  workflow_call:
    inputs:
      path:
        required: false
        type: string
        default: .
      solution_name:
        required: true
        type: string    
      region: 
        required: true
        type: string  
      bucket:
        required: false
        type: string
        default: resqme.io-deployment
      branch: 
        required: false
        type: string  
        default: main
    secrets:
      A_K:
        required: true
      S_K:
        required: true
jobs:
  build:
    outputs:
      build_path: latest.zip
      version: ${{ steps.version.outputs.secondword }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.A_K }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S_K }}
      AWS_REGION: ${{ inputs.region }}
    steps:
    - uses: actions/checkout@v1

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Dotnet CLI for AWS Lambda
      run: dotnet tool install -g Amazon.Lambda.Tools
      
    - name: Restore dependencies
      run: |
        cd ${{ inputs.path }}
        dotnet restore ${{ inputs.solution_name }} 
      
    - name: Build
      run: |
         cd ${{ inputs.path }}
         dotnet build --no-restore ${{ inputs.solution_name }}
         
    - name: Package
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd ${{ inputs.path }}
        dotnet lambda package latest.zip
        
    - name: Upload
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd ${{ inputs.path }}
        aws s3 cp latest.zip s3://${{ inputs.bucket }}/lambda/${{ github.event.repository.name }}.zip
      
    - id: version
      name: Get version
      run: aws s3api list-object-versions --bucket ${{ inputs.bucket }} --prefix lambda/${{ github.event.repository.name }}.zip --query 'Versions[?IsLatest].[VersionId]' --output text
